/**
 * @fileoverview Firestore Security Rules for the Notist application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only
 * access data associated with their own user ID. This ensures data privacy
 * and prevents unauthorized access.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. 'userId' must match the
 *   Firebase Authentication UID.
 * - /users/{userId}/notes/{noteId}: Stores notes belonging to a specific user.
 *   'userId' in the path must match the note's 'userId' field.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied, as there are no rules allowing it.
 * - Only authenticated users can access the database.
 * - Data consistency between the path and the document's internal fields
 *   (specifically, userId) is enforced.
 *
 * Denormalization for Authorization:
 * The 'userId' field is present in the Note document and also in the path. This
 * redundancy (denormalization) is intentional. It allows security rules to
 * quickly verify ownership without additional reads. The rules validate that
 * the 'userId' in the document matches the 'userId' in the path, ensuring
 * that users can only access notes they own.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Secures user profiles, ensuring only the owner can read and write their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile with matching userId.
     *    - request.auth.uid: 'user123'
     *    - request.resource.data.id: 'user123'
     * @allow (get) User with ID 'user123' reads their profile.
     *    - request.auth.uid: 'user123'
     * @allow (update) User with ID 'user123' updates their profile.
     *    - request.auth.uid: 'user123'
     * @allow (delete) User with ID 'user123' deletes their profile.
     *    - request.auth.uid: 'user123'
     * @deny (create) User with ID 'user123' tries to create a profile for 'user456'.
     *    - request.auth.uid: 'user123'
     *    - request.resource.data.id: 'user456'
     * @deny (get) User with ID 'user123' tries to read the profile of 'user456'.
     *    - request.auth.uid: 'user123'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures notes, ensuring only the owner can manage their own notes.
     * @path /users/{userId}/notes/{noteId}
     * @allow (create) User with ID 'user123' creates a note in their notes collection.
     *    - request.auth.uid: 'user123'
     *    - request.resource.data.userId: 'user123'
     * @allow (get) User with ID 'user123' reads a note from their notes collection.
     *    - request.auth.uid: 'user123'
     * @allow (update) User with ID 'user123' updates a note in their notes collection.
     *    - request.auth.uid: 'user123'
     * @allow (delete) User with ID 'user123' deletes a note from their notes collection.
     *    - request.auth.uid: 'user123'
     * @deny (create) User with ID 'user123' tries to create a note in 'user456's notes collection.
     *    - request.auth.uid: 'user123'
     *    - request.resource.data.userId: 'user456'
     * @deny (get) User with ID 'user123' tries to read a note from 'user456's notes collection.
     *    - request.auth.uid: 'user123'
     * @principle Enforces document ownership and path consistency for all operations on notes.
     */
    match /users/{userId}/notes/{noteId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}