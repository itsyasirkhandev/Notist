/**
 * @fileOverview Firestore Security Rules for Todist application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for tasks. Users can only
 * access and modify data associated with their own user ID.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with 'userId' matching the Firebase Auth UID.
 * - /users/{userId}/tasks/{taskId}: Stores tasks for each user, nested under their user ID.
 *
 * Key Security Decisions:
 * - Users can only manage tasks within their own /users/{userId}/tasks collection.
 * - Listing tasks is allowed only for the owner.
 * - The rules are designed to prevent unauthorized data access and manipulation by enforcing
 *   strict ownership checks on all read and write operations.
 *
 * Denormalization for Authorization:
 * The `userId` is part of the task document path, which simplifies authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines helper function to check if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines a helper function to check if the authenticated user is the owner of the resource.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     * @example isOwner('someUserId')
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Defines a helper function to check if the authenticated user is the owner of the existing resource.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user is the owner and resource exists, false otherwise.
     * @example isExistingOwner('someUserId')
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Security rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile document.
     * @deny (create) User with UID 'user456' cannot create a profile document for 'user123'.
     * @allow (get) User with UID 'user123' can get their own profile document.
     * @deny (get) User with UID 'user456' cannot get the profile document for 'user123'.
     * @allow (update) User with UID 'user123' can update their own profile document.
     * @deny (update) User with UID 'user456' cannot update the profile document for 'user123'.
     * @allow (delete) User with UID 'user123' can delete their own profile document.
     * @deny (delete) User with UID 'user456' cannot delete the profile document for 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for the /users/{userId}/tasks/{taskId} collection.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) User with UID 'user123' can create a new task in their own tasks subcollection.
     * @deny (create) User with UID 'user456' cannot create a task in 'user123' tasks subcollection.
     * @allow (get) User with UID 'user123' can get a task in their own tasks subcollection.
     * @deny (get) User with UID 'user456' cannot get a task in 'user123' tasks subcollection.
     * @allow (update) User with UID 'user123' can update a task in their own tasks subcollection.
     * @deny (update) User with UID 'user456' cannot update a task in 'user123' tasks subcollection.
     * @allow (delete) User with UID 'user123' can delete a task in their own tasks subcollection.
     * @deny (delete) User with UID 'user456' cannot delete a task in 'user123' tasks subcollection.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/tasks/{taskId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}