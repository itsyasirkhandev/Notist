/**
 * @fileoverview Firestore Security Rules for Todist application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only
 * access their own data, and no user can access or modify another user's data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with 'userId' matching the Firebase Auth UID.
 * - /users/{userId}/tasks/{taskId}: Stores tasks associated with a specific user.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user document.
 * - Users can only create, read, update, and delete tasks within their own /tasks subcollection.
 * - No public listing of users is allowed.
 * - Data consistency between the path and the document's internal fields is enforced.
 *
 * Denormalization for Authorization:
 * The 'userId' is embedded in the document path for tasks (`/users/{userId}/tasks/{taskId}`),
 * eliminating the need for complex `get()` calls to determine ownership. The security rules can
 * directly check the path to authorize operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (get, list) if isSignedIn() && isOwner(userId) - Allows a signed-in user to read their own profile.
     * @allow (create) if isSignedIn() && isOwner(userId) - Allows a signed-in user to create their own profile.
     * @allow (update) if isSignedIn() && isOwner(userId) - Allows a signed-in user to update their own profile.
     * @allow (delete) if isSignedIn() && isExistingOwner(userId) - Allows a signed-in user to delete their own profile.
     * @deny (get, list) if !isSignedIn() || !isOwner(userId) - Denies access to other users' profiles.
     * @deny (create) if !isSignedIn() || !isOwner(userId) - Denies other users from creating profiles under different IDs.
     * @deny (update) if !isSignedIn() || !isExistingOwner(userId) - Denies other users from updating profiles.
     * @deny (delete) if !isSignedIn() || !isExistingOwner(userId) - Denies other users from deleting profiles.
     * @principle Enforces user-ownership for profile access.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to tasks for a specific user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (get, list) if isSignedIn() && isOwner(userId) - Allows a signed-in user to read/list their own tasks.
     * @allow (create) if isSignedIn() && isOwner(userId) - Allows a signed-in user to create tasks.
     * @allow (update) if isSignedIn() && isOwner(userId) && resource != null - Allows a signed-in user to update their own tasks.
     * @allow (delete) if isSignedIn() && isOwner(userId) && resource != null - Allows a signed-in user to delete their own tasks.
     * @deny (get, list) if !isSignedIn() || !isOwner(userId) - Denies access to other users' tasks.
     * @deny (create) if !isSignedIn() || !isOwner(userId) - Denies other users from creating tasks under different IDs.
     * @deny (update) if !isSignedIn() || !isOwner(userId) || resource == null - Denies other users from updating tasks, and prevents updates to non-existent tasks.
     * @deny (delete) if !isSignedIn() || !isOwner(userId) || resource == null - Denies other users from deleting tasks, and prevents deletion of non-existent tasks.
     * @principle Enforces user-ownership for task access.
     */
    match /users/{userId}/tasks/{taskId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}