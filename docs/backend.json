{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the Todist application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "displayName": {
          "type": "string",
          "description": "User's display name."
        }
      },
      "required": [
        "id",
        "email"
      ]
    },
    "Task": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Task",
      "type": "object",
      "description": "Represents a task in the Todist application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Task entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Task)"
        },
        "content": {
          "type": "string",
          "description": "The content of the task."
        },
        "status": {
          "type": "string",
          "description": "The status of the task. (e.g., 'To Do', 'In Progress', 'Completed')"
        },
        "createdAt": {
          "type": "string",
          "description": "The date and time the task was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "The date and time the task was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "content",
        "status",
        "createdAt",
        "updatedAt"
      ]
    }
  },
  "auth": {
    "providers": [
      "google.com"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles.  The 'userId' parameter corresponds to the Firebase Authentication UID.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user, matching the Firebase Auth UID."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/tasks/{taskId}",
        "definition": {
          "entityName": "Task",
          "schema": {
            "$ref": "#/backend/entities/Task"
          },
          "description": "Stores tasks associated with a specific user. The 'userId' parameter ensures data ownership and access control.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user, matching the Firebase Auth UID."
            },
            {
              "name": "taskId",
              "description": "The unique identifier for the task."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure secure access and management of tasks within the Todist application. The core principle is Authorization Independence, achieved by structuring data in a way that security rules do not depend on hierarchical `get()` calls, which are detrimental to atomic operations and debugging. Data is structured to facilitate simple and robust security rules based on `request.auth.uid`.\n\nEach user has their own collection of tasks located at `/users/{userId}/tasks/{taskId}`. This design leverages path-based ownership, meaning the user ID is embedded in the document path. This is the most straightforward and secure way to enforce that only the authenticated user can access their tasks. This approach enables simple, robust, and easily debuggable security rules. It enforces that each user can only create, read, update, or delete tasks within their own `tasks` subcollection. This structure supports the application requirements of creating, editing, deleting, and viewing tasks, while ensuring only authenticated users can perform these actions on their own data.\n\nThis structure inherently supports QAPs (Rules are not Filters) because listing the `/users/{userId}/tasks` collection is secure, as rules can be easily scoped to the authenticated user ID without needing to filter data based on user ID after the data is retrieved."
  }
}
